<?xml version="1.0" encoding="UTF-8"?>
<!--ant-->
<project name="AYYO Video Player" basedir="." default="compile">
	<!-- set up a prefix for all environment variables -->
	<property environment="env." />
	<!-- load user properties to override defaults -->
	<property file="user.properties" />
	<!-- System environment must contain FLEX_HOME variable that points to Flex SDK -->
	<property name="FLEX_HOME" location="${env.FLEX_HOME}" />
	<!-- identify properties file -->
	<property file="build.properties" />
	<!-- Set up FlexUnit Ant tasks -->
	<taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks-4.1.0-8.jar" />

	<target name="usage">
		<echo message="" />
		<echo message="AYYO Video Player Build Usage" />
		<echo message="-----------------------------------" />
		<echo message="" />
		<echo message="Available targets are:" />
		<echo message="" />
		<echo message="compile       --&gt; Build player" />
		<echo message="clean         --&gt; Remove all folders created by build script" />
		<echo message="init          --&gt; Clean and create build folders" />
		<echo message="" />
	</target>
	<!-- Clean Build and Report files -->
	<target name="clean">
		<!-- Remove all directories created during the build process -->
		<echo>[clean] Removing Build, Report and Doc directories</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${report.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${dist.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${doc.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
		</delete>
		<echo>[clean] Build, Report and Doc directories removed</echo>
	</target>
	<!-- Create directories needed for the build process -->
	<target name="init" depends="clean">
		<echo>[init] Creating Bin, Report and Doc directories</echo>
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${report.loc}" />
		<mkdir dir="${doc.loc}" />
		<echo>[init] Bin, Report and Doc directories created</echo>
	</target>
	<!-- Compile Release SWF -->
	<target name="compile" depends="init">
		<echo>[compile] Compiling release SWF</echo>
		<echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>
		<java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg value="${main.src.loc}/${main.package}/${project.name}.as" />
			<arg value="-source-path=${main.src.loc}" />
			<arg value="-output=${bin.loc}/${project.name.versioned}.swf" />
			<arg value="-default-size=640,480" />
			<arg value="-define=CONFIG::FLASH_10_1,true"/>
			<arg value="-define=CONFIG::JSDEBUG,true"/>
			<arg value="-define=CONFIG::LOGGING,true"/>
			<arg value="-default-background-color=0x000000" />
			<arg value="-library-path+=${lib.loc}" />
			<arg value="-incremental=true" />
			<arg value="-verbose-stacktraces=true" />
			<arg value="-headless-server=false" />
			<arg value="-debug=${debug}" />
			<arg value="-static-link-runtime-shared-libraries=true" />
		</java>
		<echo>[compile] Release SWF ${project.name.versioned}.swf created successfully</echo>
	</target>

	<!-- -omit-trace-statements=true -->

	<!-- Run Unit Tests -->
	<target name="test" depends="init">
		<echo>[test] Running Unit Tests</echo>
		<!-- Compile TestRunner.as as a SWF -->
		<java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg value="${test.src.loc}/TestRunner.as" />
			<arg value="-source-path=${main.src.loc}" />
			<arg value="-output=${bin.loc}/TestRunner.swf" />
			<arg value="-default-size=200,200" />
			<arg value="-default-background-color=0x000000" />
			<arg value="-library-path+=${lib.loc}" />
			<arg value="-incremental=true" />
			<arg value="-verbose-stacktraces=true" />
			<arg value="-headless-server=false" />
			<arg value="-debug=true" />
		</java>
		<!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
		<flexunit swf="bin/TestRunner.swf" toDir="${report.loc}" haltonfailure="true" verbose="true" localTrusted="true" />
		<!-- Generate readable JUnit-style reports -->
		<junitreport todir="${report.loc}">
			<fileset dir="${report.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.loc}/html" />
		</junitreport>
		<echo>[test] Finished running Unit Tests</echo>
	</target>
	<!-- Build Documentation -->
	<target name="asdoc" depends="init">
		<echo>[asdoc] Generating ASDOC documentation</echo>
		<tstamp>
			<format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour" />
		</tstamp>
		<java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg line="-external-library-path+='${lib.loc}'" />
			<arg line="-doc-sources+='${main.src.loc}'" />
			<arg line="-source-path+='${main.src.loc}'" />
			<arg line="-output '${doc.loc}'" />
			<arg value="-keep-xml=true" />
			<arg value="-lenient=true" />
			<arg line="-window-title 'AYYO Video Player ${player.ver.num}'" />
			<arg line="-main-title 'AYYO Video Player ${player.ver.num}'" />
			<arg line="-footer 'AYYO Video Player - http://www.ayyo.ru/ - Documentation generated at: ${docgen.time}'" />
		</java>
		<echo>[asdoc] ASDOC documentation generated successfully</echo>
	</target>
</project>

